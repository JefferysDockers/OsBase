#!/bin/bash

# This hook is run by DockerHub when an auto-build is triggered as the build
# step. A trigger should be set up at dockerhub to build whenever a new tag
# is pushed to master. It can also be run manually by executing the build.sh
# script in the root of the Github repository. Note that the information in
# the tag that is pushed is ignored; the file TAG is used as the source of
# the tag name in the repo.

###
# Label input parameters
###

# Describing the image
imageName="${DOCKER_REPO}"
dockerfilePath="${DOCKERFILE_PATH}"
spdxLicense=""
licenseFile="https://ubuntu.com/licensing"
baseImagePrefix="scratch"
title="${imageName} - Base OS derived from Ubuntu."
description="Based on Ubuntu this is a completely local build of a base Docker from scratch."
keywords="Linux, Ubuntu, scratch, os"

# Describing the image's content (the included Ubuntu distro)
contentHome="https://wiki.ubuntu.com/Base"
contentSource="http://cdimage.ubuntu.com/ubuntu-base/"
contentTitle="Ubuntu base os distribution"
contentDescription="Minimalist non-official functional distribution of Ubuntu, including apt-get"
contentSpdxLicense=""
contentLicenseFile="https://ubuntu.com/licensing"
contentVendor="Canonical"
contentVendorUrl="https://canonical.com/"

# Independent of image and content
labelSchemaVersion="0.0.1"
vendor="UNC - Lineberger"
vendorUrl="https://lbc.unc.edu/"

# Constant across my dockers
labelSchema="io.github.JefferysDockers"
imageRepoOwner="jefferys"
sourceRepoOwner="JefferysDockers"
imageRepoRootUrl="https://hub.docker.com/r"
sourceRepoRootUrl="https://github.com"
maintainer="Stuart R. Jefferys <stuart_jefferys@med.unc.edu>"

###
# End of label input parameters
###

# Get tag for image, and parse into parts: the before first "-" part (the tool
# version) and the after first "-" part (the build version).
read TAG < "TAG"
contentVersion="${TAG%%-*}"
sourceVersion="${TAG#*-}"

# Time created
created="$(date "+%Y-%m-%dT%H:%M:%S%z")"
afterPos=$(( ${#created} - 2 ))
created="${created:0:${afterPos}}:${created:${afterPos}}"

# Full label namespace with unique image id prepended
NS="${imageRepoOwner}.${imageName}.${labelSchema}"

###
# Build command.
###

docker build \
  --label "${NS}.base-prefix=${baseImagePrefix}" \
  --label "${NS}.name=${imageName}" \
  --label "${NS}.home=${imageRepoRootUrl}/${imageRepoOwner}/${imageName}" \
  --label "${NS}.version=${TAG}" \
  --label "${NS}.maintainer=${maintainer}" \
  --label "${NS}.source-version=${sourceVersion}" \
  --label "${NS}.source-home=${sourceRepoRootUrl}/${sourceRepoOwner}/${imageName}" \
  --label "${NS}.source-maintainer=${maintainer}" \
  --label "${NS}.pull=${imageRepoOwner}/${imageName}:$TAG" \
  --label "${NS}.license-spdx=${spdxLicense}" \
  --label "${NS}.license-file=${licenseFile}" \
  --label "${NS}.vendor=${vendor}" \
  --label "${NS}.vendorUrl=${vendorUrl}" \
  --label "${NS}.title=${title}" \
  --label "${NS}.description=${description}" \
  --label "${NS}.content-home=${contentHome}" \
  --label "${NS}.content-version=${contentVersion}" \
  --label "${NS}.content-source=${contentSource}" \
  --label "${NS}.content-license-spdx=${contentSpdxLicense}" \
  --label "${NS}.content-license-file=${contentLicenseFile}" \
  --label "${NS}.content-vendor=${contentVendor}" \
  --label "${NS}.content-vendorUrl=${contentVendorUrl}" \
  --label "${NS}.content-title=${contentTitle}" \
  --label "${NS}.content-description=${contentDescription}" \
  --label "${NS}.created=${created}" \
  --label "${NS}.label-schema-version=${labelSchemaVersion}" \
  --tag "${imageRepoOwner}/${imageName}:latest" \
  --tag "${imageRepoOwner}/${imageName}:${contentVersion}" \
  --tag "${imageRepoOwner}/${imageName}:${contentVersion}-${sourceVersion}" \
  -f ${dockerfilePath} \
  .